INCLUDE 'EMU8086.INC'
.MODEL SMALL
.STACK 100H
.DATA
  MATRIX_A DB 9 DUP(?) 
  MATRIX_B DB 9 DUP(?) 
  RESULT_MATRIX DB 9 DUP(?)
  
  MENU_MESSAGE DB 0DH,0AH, 'MENU:', 0DH,0AH,'1.Input Matrix',0DH,0AH,'2.Perform Calculation',0DH,0AH,'3.Exit',0DH,0AH,'$'
  
  OPERATION_MENU_MESSAGE DB 0DH,0AH,'Operation Menu:',0DH,0AH,'1.Addition',0DH,0AH,'2.Subtraction',0DH,0AH,'3.Multiplication',0DH,0AH,'4.Position Multiplication',0DH,0AH,'5.Position Division',0DH,0AH,'6.Back to Menu',0DH,0AH,'7.Exit',0DH,0AH,'$'

  RESULT_MATRIX_MESSAGE DB 0DH,0AH, 'Result Matrix: ',0DH,0AH,'$'
  
  
.CODE
  MAIN PROC
     MOV AX,@DATA
     MOV DS,AX
     
  MENU:   ;DISPLAY THE MENU
   CALL DISPLAY_MENU
   MOV AH,1
   INT 21H
   PRINTN
   CMP AL,'1' ;CHECK IF THE USER SELECTED OPTION 1(INPUT MATRICES)
   JE INPUT_MATRICES
   
   CMP AL,'2' ;CHECK IF THE USER SELECTED OPTION 2(PERFORM CALCULATION)
   JE PERFORM_CALCULATION
   
   CMP AL,'3' ;CHECK IF THE USER SELECTED OPTION 3(EXIT)
   JE EXIT_PROGRAM
   
   JMP MENU   ;JUMP BACK TO THE MENU IF AN INVALID OPTION IS SELECTED
   
   
  INPUT_MATRICES: 
  
    ;INPUT MATRIX A
    MOV SI,OFFSET MATRIX_A
    MOV CX,9  ;NUMBER OF ELEMENTS IN THE MATRIX
    PRINT "Enter the first matrix: "
    CALL INPUT_MATRIX
    PRINTN
    PRINTN
    
    PRINT "Enter the second matrix: "
    ;INPUT MATRIX B
    MOV SI,OFFSET MATRIX_B
    MOV CX,9 
    CALL INPUT_MATRIX
    PRINTN
    
    JMP MENU  ; JUMP BACK TO THE MENU
    
   
   PERFORM_CALCULATION:
    ; PERFORM MATRIX CALCULATION
    CALL DISPLAY_OPERATION_MENU
    MOV AH, 1
    INT 21H

    CMP AL, '1'  ; CHECK IF THE USER SELECTED OPTION 1 (ADDITION)
    JE PERFORM_ADDITION

    CMP AL, '2'  ; CHECK IF THE USER SELECTED OPTION 2 (SUBTRACTION)
    JE PERFORM_SUBTRACTION

    CMP AL, '3'  ; CHECK IF THE USER SELECTED OPTION 3 (MULTIPLICATION)
    JE PERFORM_MULTIPLICATION

    CMP AL, '4'  ; CHECK IF THE USER SELECTED OPTION 4 (POSITION MULTIPLICATION)
    JE PERFORM_POSITION_MULTIPLICATION

    CMP AL, '5'  ; CHECK IF THE USER SELECTED OPTION 5 (POSITION DIVISION)
    JE PERFORM_DIVISION

    CMP AL, '6'  ; CHECK IF THE USER SELECTED OPTION 6 (BACK TO THE MENU)
    JE MENU

    CMP AL, '7'  ; CHECK IF THE USER SELECTED OPTION 7 (EXIT)
    JE EXIT_PROGRAM

    JMP PERFORM_CALCULATION
     
   
   PERFORM_ADDITION:
     ;CALCULATION MATRIX ADDITION
     
     MOV SI,OFFSET MATRIX_A
     MOV DI,OFFSET MATRIX_B
     MOV BX,OFFSET RESULT_MATRIX
     MOV CX,9
     
     ADD_MATRICES:
      MOV AL,[SI]
      ADD AL,[DI]
      MOV [BX],AL
      
      INC SI
      INC DI
      INC BX
      LOOP ADD_MATRICES 
      
      ;DISPLAY RESULT MATRIX FOR ADDITION
      CALL DISPLAY_RESULT_MATRIX
      
      JMP PERFORM_CALCULATION  ;JUMP BACK TO THE OPERATION MENU
      
      
   PERFORM_SUBTRACTION:
       ;CALCULATION MATRIX SUBTRACTION
     
     MOV SI,OFFSET MATRIX_A
     MOV DI,OFFSET MATRIX_B
     MOV BX,OFFSET RESULT_MATRIX
     MOV CX,9
     
     SUB_MATRICES:
      MOV AL,[SI]
      SUB AL,[DI]
      MOV [BX],AL
      
      INC SI
      INC DI
      INC BX
      LOOP SUB_MATRICES 
      
      ;DISPLAY RESULT MATRIX FOR SUBTRACTION
      CALL DISPLAY_RESULT_MATRIX
      
      JMP PERFORM_CALCULATION  ;JUMP BACK TO THE OPERATION MENU
   
   
   PERFORM_MULTIPLICATION:
     ;CALCULATION MATRIX MULTIPLICATION
     
     MOV SI,OFFSET MATRIX_A
     MOV DI,OFFSET MATRIX_B
     MOV BX,OFFSET RESULT_MATRIX
     
     XOR CX,CX
     XOR AX,AX
     
     MOV CL,3
     MOV CH,3
    
     MUL_MATRICES3:
       MOV DH,3
     
     MUL_MATRICES2:
       MOV DL,0
       MOV CH,3
       
     MUL_MATRICES1:
       MOV AL,[SI]
       MUL [DI]
       ADD DL,AL
       INC SI
       ADD DI,3
       DEC CH
       JNZ MUL_MATRICES1
       MOV [BX],DL
       INC BX
       SUB SI,3
       SUB DI,9
       INC DI
       DEC DH
       JNZ MUL_MATRICES2
       ADD SI,3
       SUB DI,3
       DEC CL
       JNZ MUL_MATRICES3
       
        
      ;DISPLAY RESULT MATRIX FOR MULTIPLICATION
      CALL DISPLAY_RESULT_MATRIX
      
      JMP PERFORM_CALCULATION  ;JUMP BACK TO THE OPERATION MENU
      
      
   PERFORM_POSITION_MULTIPLICATION:
     ;CALCULATION MATRIX POSITION MULTIPLICATION
     
     MOV SI,OFFSET MATRIX_A
     MOV DI,OFFSET MATRIX_B
     MOV BX,OFFSET RESULT_MATRIX
     MOV CX,9
     
     XOR AX,AX  ;CLEAR AX REGISTER
     
     MUL_MATRICES:
      MOV AL,[SI]
      MOV DL,[DI]
      MUL DL
      MOV [BX],AL
      
      INC SI
      INC DI
      INC BX
      LOOP MUL_MATRICES 
      
      ;DISPLAY RESULT MATRIX FOR POSITION MULTIPLICATION
      CALL DISPLAY_RESULT_MATRIX
      
      JMP PERFORM_CALCULATION  ;JUMP BACK TO THE OPERATION MENU
      
   PERFORM_DIVISION:
    ; CALCULATE MATRIX POSITION DIVISION

    MOV SI, OFFSET MATRIX_A
    MOV DI, OFFSET MATRIX_B
    MOV BX, OFFSET RESULT_MATRIX
    MOV CX, 9

    DIV_MATRICES:
        MOV AL, [SI]
        XOR AH, AH    ; Clear the high byte of AX before division
        DIV [DI]
        MOV [BX], AL

        INC SI
        INC DI
        INC BX
        LOOP DIV_MATRICES

    ; DISPLAY RESULT MATRIX FOR POSITION DIVISION
    CALL DISPLAY_RESULT_MATRIX

    JMP PERFORM_CALCULATION  ; JUMP BACK TO THE OPERATION MENU
   
   
      
   INPUT_MATRIX PROC
    
      MOV AH,1
      INT 21H
      
      CMP AL,0DH
      JE END_INPUT
      
      SUB AL,30H  ;CONVERT FROM ASCII TO DECIMAL
      MOV [SI],AL
      
      INC SI
      LOOP INPUT_MATRIX
      
      END_INPUT:
      RET
   INPUT_MATRIX ENDP
   
   
   DISPLAY_MATRIX PROC
      MOV DL,[SI]
     
      MOV AH,2
      INT 21H
      
      INC SI
      RET
   DISPLAY_MATRIX ENDP
   
      
   DISPLAY_MENU PROC
      MOV AH,9
      MOV DX,OFFSET MENU_MESSAGE
      INT 21H
      RET
   DISPLAY_MENU ENDP
   
   DISPLAY_OPERATION_MENU PROC
    MOV AH, 9
    MOV DX, OFFSET OPERATION_MENU_MESSAGE
    INT 21H

    RET
DISPLAY_OPERATION_MENU ENDP

      
   DISPLAY_RESULT_MATRIX PROC
    MOV AH, 9
    MOV DX, OFFSET RESULT_MATRIX_MESSAGE
    INT 21H

    MOV SI, OFFSET RESULT_MATRIX
    MOV CX, 9

    ;INITIALIZE ROW COUNTER
    MOV BX, 0
    
    ;DISPLAY THE RESULT MATRIX IN 3x3 FORMAT
    DISPLAY_MATRIX_LOOP:
        CALL DISPLAY_MATRIX
        INC BX
        CMP BX, 3
        JNE CONTINUE_DISPLAY
        MOV BX, 0   ;RESET ROW COUNTER
        MOV DL, 0DH ;MOVE TO A NEW LINE
        MOV AH, 2
        INT 21H
        MOV DL, 0AH
        INT 21H

    CONTINUE_DISPLAY:
        PRINT " "
        LOOP DISPLAY_MATRIX_LOOP

    RET
DISPLAY_RESULT_MATRIX ENDP

  
    EXIT_PROGRAM:
       MOV AH,4CH
       INT 21H
END MAIN
